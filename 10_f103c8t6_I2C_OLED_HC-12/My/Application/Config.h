/*
 *  Config.h
 *
 *  Created on:
 *      Author: Zver
 */
#ifndef _Config_H
#define _Config_H
//*******************************************************************************************
//*******************************************************************************************

//#include "stm32f10x.h"
//#include <string.h>
#include "main.h"

//*******************************************************************************************
#define CONFIG_CHECK_KEY_DEFINE		0x12345678 
#define CONFIG_DATA_WORD           (1024 / 4)//(FLASH_PAGE_SIZE / 4) //количество 32-х слов.
#define CONFIG_FLASH_PAGE			FLASH_PAGE_127
#define CONFIG_FLASH_PAGE_END_ADDR	FLASH_PAGE127_END_ADDR
//***************************************
//#pragma pack(push, 1)//размер выравнивания в 1 байт
//typedef struct {
//	//----------
//	//Параметры входов ШС.
//	uint16_t Type;
//	uint16_t Timeout;
//	//----------
//}FireLineConfig_t;
//#pragma pack(pop)//вернули предыдущую настройку.
//***************************************
/***************Конфигурация************/
#pragma pack(push, 1)//размер выравнивания в 1 байт
typedef struct{
	uint32_t checkKey;//проверочная последовательность
	char 	 name[16];//Название проекта
	uint32_t xtalFreq;//Частота кварца.

	//----------
	char SW[4];//Версия ПО
	char HW[4];//Версия железа
	//----------
	uint8_t Address;//адрес блока.
	uint8_t Group;	 //группа блока.
	//----------
	//Установленные на контроль линии питания блока.
	uint8_t PowerCheckOn;
	//----------
	//Параметры линий Гр.
	uint16_t SpDeviation;//Отклонение для фиксации неисправности на линии Гр.
	uint8_t  SpCheck;    //Установленные на контроль линии Гр.
	//----------
	//Параметры входов ШС.
	//FireLineConfig_t FireLineConfig[FIRE_LINES_NUMBER];
	//----------
}Config_t;
#pragma pack(pop)//вернули предыдущую настройку.
//**********************************
//
typedef struct{
	uint8_t  data[1024 - 12];//данные, записываемые в сектор памяти.
	uint32_t Nwrite;         //количество записей в данный секетор памяти.
	uint32_t ChangeConfig;   //используется для отслеживания изменений в конфигурации.
	uint32_t CheckSum;       // 
}STM32_FLASH_Sector_t;
//**********************************
//
typedef union{
	Config_t             config;
	STM32_FLASH_Sector_t sector;
	uint32_t             data32[CONFIG_DATA_WORD];
}DataForFLASH_t;
//*******************************************************************************************
//*******************************************************************************************
Config_t* Config     (void);
Config_t* Config_Save(void);
void      Config_Init(void);
void      Config_SaveLoop(void);

//*******************************************************************************************
//*******************************************************************************************
#endif /*_Config_H*/














