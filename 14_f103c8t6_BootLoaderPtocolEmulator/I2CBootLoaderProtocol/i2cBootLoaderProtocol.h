/*
 * i2cBootLoaderProtocol.h
 *
 *  Created on: 10 февр. 2023 г.
 *      Author: belyaev
 */

#ifndef _I2C_BOOTLOADER_PROTOCOL_H_
#define _I2C_BOOTLOADERP_ROTOCOL_H_
//*******************************************************************************************
//*******************************************************************************************

#include "main.h"

//*******************************************************************************************
//*******************************************************************************************
#define BOOT_I2C				I2C1
#define BOOT_I2C_SPEED			400000
#define BOOT_I2C_ADDR			(0b0111000 << 1) //такой адрес у встроенных I2C загрузчиков STM32

#define BOOT_I2C_WRITE			I2C_MODE_WRITE
#define BOOT_I2C_READ			I2C_MODE_READ

#define BOOT_I2C_DEVICE_OK		0x01	//устройство ответило на свой адрес
#define BOOT_I2C_NO_DEVICE		0x00	//устройства нет на шине I2C

//Состояния исполнения команад
#define CMD_BOOT_ACK			0x79	//пакет принят   (команда выполнена)
#define CMD_BOOT_NACK			0x1F	//пакет отброшен (команда не выполнена)
#define CMD_BOOT_BUSY			0x76	//состояние занятости (команда в процессе выполнения)

//Команды загрузчика
#define CMD_BOOT_Get			0x00	//Получает версию и разрешенные команды, поддерживаемые текущей версией загрузчика.
#define CMD_BOOT_GetVersion		0x01	//Получает версию загрузчика.
#define CMD_BOOT_GetID			0x02	//Получает идентификатор чипа
#define CMD_BOOT_RM				0x11	//Read Memory - Читает до 256 байт памяти, начиная с адреса, указанного приложением.
#define CMD_BOOT_Go				0x21	//Переходит к коду пользовательского приложения, расположенному во внутренней флэш-памяти.
#define CMD_BOOT_WM				0x31	//Write Memory - Записывает в память до 256 байт, начиная с адреса, указанного приложением.
#define CMD_BOOT_NS_WM			0x32	//No-Stretch Write Memory - Записывает в память до 256 байт, начиная с адреса, указанного приложением, и возвращает состояние занятости во время выполнения операции.
#define CMD_BOOT_Erase			0x44	//Стирает от одной до всех страниц или секторов флэш-памяти, используя режим двухбайтовой адресации.
#define CMD_BOOT_NS_Erase		0x45	//Стирает от одной до всех страниц или секторов флэш-памяти, используя режим двухбайтовой адресации, и возвращает состояние занятости во время выполнения операции.
#define CMD_BOOT_Special		0x50	//Общая команда, которая позволяет добавлять новые функции в зависимости от ограничений продукта, не добавляя новую команду для каждой функции.
#define CMD_BOOT_ExtSpecial		0x51	//Extended Special - Общая команда, которая позволяет пользователю отправлять больше данных по сравнению со специальной командой.
#define CMD_BOOT_WP				0x63	//Write Protect - Включает защиту от записи для некоторых секторов.
#define CMD_BOOT_NS_WP			0x64	//No-Stretch Write Protect - Включает защиту от записи для некоторых секторов и возвращает состояние занятости во время выполнения операции.
#define CMD_BOOT_WUP			0x73	//Write Unprotect - Отключает защиту от записи для всех секторов флэш-памяти.
#define CMD_BOOT_NS_WUP			0x74	//No-Stretch Write Unprotect - Отключает защиту от записи для всех секторов флэш-памяти и возвращает состояние занятости во время выполнения операции.
#define CMD_BOOT_RP				0x82	//Readout Protect - Включает защиту от чтения.
#define CMD_BOOT_NS_RP			0x83	//No-Stretch Readout Protect - Включает защиту от чтения и возвращает состояние занятости во время выполнения операции.
#define CMD_BOOT_RUP			0x92	//Readout Unprotect - Отключает защиту от чтения.
#define CMD_BOOT_NS_RUP			0x93	//No-Stretch Readout Unprotect - Отключает защиту от чтения и возвращает состояние занятости во время выполнения операции.
#define CMD_BOOT_NS_GetMemCs	0xA1	//No-Stretch Get Memory Checksum - Получает значение контрольной суммы CRC для области памяти на основе ее смещения и длины.

//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
//*******************************************************************************************
void 	BL_PROT_I2CInit(void);

uint8_t BL_PROT_CheckDevice(void);
void 	BL_PROT_SendCmd(uint8_t cmd);
uint8_t BL_PROT_WaitACK(void);
uint8_t BL_PROT_ReceiveData(uint8_t *buf, uint32_t size);
uint8_t BL_PROT_SendData(uint8_t *buf, uint32_t size);
uint8_t BL_PROT_GetChecksum(uint8_t *buf, uint32_t size);

//*******************************************************************************************
//*******************************************************************************************
#endif /* _I2C_BOOTLOADERP_ROTOCOL_H_ */
